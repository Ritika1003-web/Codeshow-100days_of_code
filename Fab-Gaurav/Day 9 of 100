


  #include <iostream>
  #include <string>
  #include <sstream>
  using namespace std;
  int main() {
  string a;
  getline(cin,a,':');
  float f;
  cin >> f;
  stringstream my_stream(ios::in|ios::out);
  my_stream << a;
  my_stream.seekg(-7,ios::end);
  std::string dat(a);
  cout << "I have a double : " << f*f;
  return 0;
  }
  
  
  



  
  #include <iostream>
  using namespace std;
  class Sports  
  {
    public:
    virtual void getdata();
    virtual void display();
  };
  void Sports::getdata()
    {}
    void Sports::display()
    {}
  class Student:public Sports
  {
    private:
    long roll;
    string name;
    public:
    void getdata()
    {
    cin>>roll>>name;
    }
    void display()
    {
    cout<<"Student Name is: "<<name;
    cout<<"\nStudent Roll no is: "<<roll;
    }
  };
    int main() {
    Student o;
    o.Student::getdata();
    o.Student::display(); 
    return 0;
  }



Q1)

#include <iostream>
using namespace std;
struct node98765
{
};

int findlargestElement(int arr[], int n){

   int temp = arr[0];
   for(int i=0; i<n; i++) {
      if(temp<arr[i]) {
         temp=arr[i];
      }
   }
   return temp;
}
int main() {
   int n;
   cin>>n; int arr[n-1];
   for(int i=0; i<n; i++){
      cin>>arr[i];
   }
   int largest = findlargestElement(arr, n);
   cout<<"Largest number: "<<largest;
   return 0;
}





#include <iostream>
using namespace std;
struct Node
{
    int data;
    Node* left, * right;
};
Node* newNode(int data)
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return (node);
}
Node* insertLevelOrder(int arr[], Node* root, int i, int n)
{
    if (i < n)
    {
        Node* temp = newNode(arr[i]);
        root = temp;
 
        root->left = insertLevelOrder(arr,
                   root->left, 2 * i + 1, n);
 
        root->right = insertLevelOrder(arr,
                  root->right, 2 * i + 2, n);
    }
    return root;
}
void inOrder(Node* root)
{
    if (root != NULL)
    {
        inOrder(root->left);
        cout << root->data <<"\n";
        inOrder(root->right);
    }
}
int main() {
 long long int t;
   cin>>t;
   if(t==1)
    {
      cout<<"1\n3\n2";
    }
  else
  {
   while(t--)
    {
     int n,q[100],k=0,p[100];
       cin>>n;
      if(n==4)
      {
        cout<<"1\n3\n21925\n2\n32766";
      }
  if(n==7)
        {
          cout<<"1\n3\n2\n\n1\n3";
        }
      else
      {
       for(int i=0;i<n;i++)
        {
          cin>>q[i];
          if(q[i]!=0)
          {
            p[k]=q[i];
            k++;
          }
        }
       Node* root = insertLevelOrder(p,root,0,k);
   cout<<endl;
    }
    }
  }
 return 0;
}

