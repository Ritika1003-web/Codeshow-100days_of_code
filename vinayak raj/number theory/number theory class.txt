#include <iostream>
#include <cmath>

using namespace std;

bool check_prime(int n){
    bool a;
    int counter=0;
    for(int j=1;j<=pow(n,0.5);j++){
        if(n%j==0 && j*j!=n){
            counter+=2;
        }
        if(n%j==0 && j*j==n){
            counter+=1;//25^0.5=5*5
        }
    }
    if(counter ==2){
        a=true;
    }
    else{
        a=false;
    }
    return a;

}

int main(){
    int n;
    cin>>n;
    int no_of_primes=0;
    for(int i=0;i<=n;i++){ //O(n)
        if(check_prime(i)){ //O(n^0.5)
            cout<<i<<endl;
            no_of_primes++;
        }
    }
    cout<<endl<<endl<<no_of_primes;
}

day 2

/*#include <iostream>
#include <cmath>

using namespace std;

int make_sieve(int n){
    bool is_prime[n+1];
    for(int i=0;i<n+1;i++){
        is_prime[i]=true;
    }
    is_prime[0]=false;
    is_prime[1]=false;
    for(int i=2;i*i<=n;i++){
        if(is_prime[i]==true){
            for(int j=i*i;j<=n;j+=i){
                is_prime[j]=false;
            }
        }
    }
    int counter=0;
    for(int i=0;i<=n;i++){
        if(is_prime[i]==true){
            cout<<i<<endl<<endl<<endl;
            counter++;
        }
    }
    return counter;
}

int main(){
    int n;
    cin>>n;
    int no_of_primes=make_sieve(n);
    cout<<no_of_primes<<endl;
    return 0;
}
*/


#include <iostream>
#include <bits/stdc++.h>>

using namespace std;
int find_gcd(int a,int b){
    if(a<b){
        return find_gcd(b,a);
    }
    if(b==0){
        return a;
    }
    return find_gcd(b,a%b);
}

int main(){

    int a=20;
    int b=10;
    int gcd2=__gcd(10,20);
    int gcd= find_gcd(10,20);
    cout<<gcd<<endl;
    return 0;
}